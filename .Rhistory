#arrange the list in descending order
arrange(desc(total))
View(count_ross_states_jobs)
count_ross_states_jobs[1:4]
#Meh, too many nulls to really be helpful, but got a few to look into.
#1      New York    Self-Employed     5 18500.00
#5    Burlingame Geodesic Capital     2 12000.00
###############7#################
#Let's zoom back out then. Let's just group by employer name.
ross_contribsby_employer1 <- ross_contribs_all %>%
#groups the values by the employer.name, condensing all duplicates.
group_by(`Employer Name`) %>%
#sums the values from the contribution amount column and places it into the group by we requested above.
summarise(total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
#show me what I just did
View(ross_contribsby_employer1 )
ross_contribsby_employer1[1:10,]
#FINDING: Hmm unfortunately the NAs are a little too overwhelming to be totally useful, but it's interesting that Prince George's County employees gave 23k.
#1             <NA> 141626.9
#2    Self-Employed  38864.4
#3          Retired  37228.3
#4    Self Employed  28369.1
#5         LinkedIn  19000.0
#6     Not Employed  12500.0
###############8#################
ross_contribsby_occupation <- ross_contribs_all %>%
#the colum we are grouping
group_by(`Employer Occupation`) %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
#show me what I just did
View(ross_contribsby_occupation)
ross_contribsby_occupation[1:10,]
#FINDING:Unfortunately NA and other are runaways.
###############9################
#Hey big spender, let's look at all the contributions ordered by amount....
ross_contribs_sunmmed_arranged<- ross_contribs_all %>%
group_by(`Contributor Name`) %>%
#sums the values from the contribution amount column and places it into the group by we requested above.
summarise(total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
#show me what I just did
View(ross_contribs_sunmmed_arranged)
ross_contribs_sunmmed_arranged[1:10,]
#some people I don't know....
#1       Cerf  Sigrid 12000.00
#2   McKinnon  Andrew  6005.29
#3     Allen  Herbert  6000.00
#4    Barzun  Matthew  6000.00
#5     Behrens  Bruce  6000.00
################################10#########################
#OK, finally, let's look at the contribution amounts grouped by contribution type.
ross_contribution_type  <- ross_contribs_all %>%
#the colum we are grouping
group_by(`Contributor Type`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(ross_contribution_type)
ross_contribution_type[1:10,]
#What I'm seeing is that rossis getting lots from individuals, but he gave himself a big chunk of change too
#1                                      Individual  1529 1007708.89
#2                     Business/Group/Organization    16   31944.71
#3 Unregistered Out-of-State Non-Federal Committee     1    5999.00
#4                                   PAC Committee     2    3000.00
#5                                Self (Candidate)     1    2000.00
count_ross_smallcontribs <- ross_state_list_fromzips %>%
#the colum we are grouping
filter(`Contribution Amount` < 250 )  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
count_ross_smallcontribs[1:2]
count_ross_bigcontribs <- ross_state_list_fromzips %>%
#the colum we are grouping
filter(`Contribution Amount` > 2500 )  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
count_ross_bigcontribs[1:2]
vignarajah_contribs_all <- cleaned_contributions_new  %>%
#here we're creating a dataframe of all entries that have the receiving committee equaling vignarajah. And it excludes in-kind and refund/rebate information
filter(`Receiving Committee` == "Vignarajah  Krish for Maryland") %>%
filter(`Contribution Type` != "In-Kind") %>%
filter(`Contribution Type` != "Coordinated In-Kind") %>%
filter(`Contribution Type` != "Refund/Rebate")
View(vignarajah_contribs_all)
#this also creates the a dataframe of rebartes and inkind donations that I pulled out of the contributions list. Just to see if I see something interesting.
vignarajah_inkind_rebates_all <- cleaned_contributions_new  %>%
#here we're creating a dataframe of all entries that have the receiving committee equaling vignarajah. And it excludes in-kind and refund/rebate information
filter(`Receiving Committee` == "Vignarajah  Krish for Maryland") %>%
filter(`Contribution Type` == "In-Kind" | `Contribution Type` == "Refund/Rebate" |  `Contribution Type` == "Coordinated In-Kind")
View(vignarajah_inkind_rebates_all)
##############################2####################
# So as a safeguard, let's look at vignarajah's contributions and see if they match up with the Baltimore Sun's numbers.....not for antything but they seem like a competent grtoup of journalists.
sum(vignarajah_contribs_all$`Contribution Amount`)
#434747.2 is what I got....and their campaign information also said $434,747.18. Ding!
sum(vignarajah_inkind_rebates_all$`Contribution Amount`)
#49070
#########################3#################
#let's start exploring where in the world this money is coming from...We can do that by extracting zip codes
#searches for all number combos that are either 5 digits long or 5 digits followed by 4 digits with a dash in between.
vignarajah_zips1 <- stri_extract_all_regex(vignarajah_contribs_all$`Contributor Address`, "(?<!\\d)(\\d{5}(?:[-\\s]\\d{4})?)\\b")
#pull out the 5 digit strings from the rest.
vignarajah_5digitzips <- stri_extract_all_regex(vignarajah_zips1, "\\d{5}")
#I was getting some extra 5 digit combos from addresses, so I used this lapply command to just grab the last one, since the zip is always last.
vignarajah_zips2 <- map(vignarajah_5digitzips , function(x) x[length(x)])
#creates the dataframe vignarajah_c as new vignarajah_c
vignarajah_zips_df <- data_frame(vignarajah_zips2)
#changes the list to a numeric value. This helps the group by function which do4sn't like lists.
vignarajah_zips_df %>% mutate_if(is.list, as.character) -> vignarajah_zips_df
#changes the column header in the new dataframe to zip_codes. this will be helpful later on because it is unique.
colnames(vignarajah_zips_df)[which(names(vignarajah_zips_df) == "vignarajah_zips2")] <- "zip_codes"
#binds it to the vignarajahcontributions database
newvignarajah_contribswithzips <- cbind(vignarajah_zips_df, vignarajah_contribs_all)
#ok, so now that we have our new list with the added zip codes, we can go through and group them and count them.
count_vignarajah_zip_codes <- newvignarajah_contribswithzips %>%
#the colum we are grouping
group_by(zip_codes)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_vignarajah_zip_codes)
count_vignarajah_zip_codes[1:10,]
##########################4##########################
#now let's group by state and see where this money is coming from by joining this data with a helpful database of zip codes that is part of the zipcode library.....which you should install, or you're not going anywhere pat'na. PS: zipcode also has a cleaning feature, but it didn't work for my purposes. Thus the code above.
#pulls the database of zip codes/state information
data(zipcode)
View(zipcode)
#creates a merged list of zip codes and the vignarajahinformation.
vignarajah_state_list_fromzips <-  left_join(newvignarajah_contribswithzips, zipcode, by =c("zip_codes" = "zip"))
##########################5###########################
#so let's count it up and see what we got. I'm grouping by city and state, but that can be changed, if needed.
count_vignarajah_states <- vignarajah_state_list_fromzips %>%
#the colum we are grouping
group_by(state, city)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_vignarajah_states)
count_vignarajah_states[1:10,]
#So Interesting.Columbia Maryland....6 donors for 100k? I smell self-funding.
#1    MD    Columbia     6 100950
#2    NY    New York    87  51861
#3    DC  Washington   109  30195
#4    MA   Cambridge     8  12600
#5    CA Bakersfield     2  12000
################################10#########################
#OK, I'm going to go ahead and see who these people are....
vignarajah_contribution_type  <- vignarajah_contribs_all %>%
#the colum we are grouping
group_by(`Contributor Type`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(vignarajah_contribution_type)
vignarajah_contribution_type[1:10,]
#yep the candidate gave 100k to themselves.
#1                  Individual   930 334147.2
#2            Self (Candidate)     1 100000.0
#3 Business/Group/Organization     2    600.0
#######################5a##################
#because there's so muhc money from DC let's back up and just sort by states. That way we can see what's what as far as totals go.
count_vignarajah_just_states <- vignarajah_state_list_fromzips %>%
#the colum we are grouping
group_by(state)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_vignarajah_just_states)
count_vignarajah_just_states[1:10,]
#Interesting. Maryland contributed much more (100k is from the candidate), but CA, DC, and NY all did give some money....
#1    MD   334 168291.2
#2    NY   134  72926.0
#3    CA    93  48611.0
#4    DC   109  30195.0
#5    MA    25  21445.0
##########################6###########################
# now let's examine what these people's employer is. This categorty is a bit anemic, because many of the fields are left blank, but why not try, amirite?
count_vignarajah_states_jobs <- vignarajah_state_list_fromzips %>%
#the colum we are grouping
group_by(city, `Employer Name`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_vignarajah_states_jobs)
count_vignarajah_states_jobs[1:4]
#Meh, too many nulls to really be helpful, but got a few to look into.
#2    New York                       Self-Employed     7  12600
#5 Bakersfield Comprehensive Blood & Cancer Center     1   6000
#6 Bakersfield                       Self-Employed     1   6000
###############7#################
#Let's zoom back out then. Let's just group by employer name.
vignarajah_contribsby_employer1 <- vignarajah_contribs_all %>%
#groups the values by the employer.name, condensing all duplicates.
group_by(`Employer Name`) %>%
#sums the values from the contribution amount column and places it into the group by we requested above.
summarise(total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
#show me what I just did
View(vignarajah_contribsby_employer1 )
vignarajah_contribsby_employer1[1:10,]
#FINDING: Hmm unfortunately the NAs are a little too overwhelming to be totally useful, but it's interesting that Prince George's County employees gave 23k.
#1                                <NA> 178187.2
#2                       Self-Employed  29310.0
#3                        Not Employed  17499.0
#4                             Retired  15200.0
#5              Caravel Management LLC   6500.0
###############8#################
vignarajah_contribsby_occupation <- vignarajah_contribs_all %>%
#the colum we are grouping
group_by(`Employer Occupation`) %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
#show me what I just did
View(vignarajah_contribsby_occupation)
vignarajah_contribsby_occupation[1:10,]
#FINDING:Unfortunately NA and other are such runaways it's not even worth putting here.
###############9################
#Hey big spender, let's look at all the contributions ordered by amount....
vignarajah_contribs_sunmmed_arranged<- vignarajah_contribs_all %>%
group_by(`Contributor Name`) %>%
#sums the values from the contribution amount column and places it into the group by we requested above.
summarise(total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
#show me what I just did
View(vignarajah_contribs_sunmmed_arranged)
vignarajah_contribs_sunmmed_arranged[1:10,]
#some people I don't know....Mario Batali. Heard that name.
count_vignarajah_smallcontribs <- vignarajah_state_list_fromzips %>%
#the colum we are grouping
filter(`Contribution Amount` < 250 )  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
count_vignarajah_smallcontribs[1:2]
count_vignarajah_bigcontribs <- vignarajah_state_list_fromzips %>%
#the colum we are grouping
filter(`Contribution Amount` > 2500 )  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
count_vignarajah_bigcontribs[1:2]
#before we break it up by candidate, let's see where the money is coming from to all candidates within the state of Maryland.
#let's start exploring where in the world this money is coming from...We can do that by extracting zip codes.
#searches for all number combos that are either 5 digits long or 5 digits followed by 4 digits with a dash in between.
contributions_all_zips1 <- stri_extract_all_regex(cleaned_contributions_new$`Contributor Address`, "(?<!\\d)(\\d{5}(?:[-\\s]\\d{4})?)\\b")
contributions_all_5digitzips <- stri_extract_all_regex(contributions_all_zips1, "\\d{5}")
#I was getting some extra 5 digit combos from addresses, so I used this lapply command to just grab the last one, since the zip is always last.
contributions_all_zips2 <- map(contributions_all_5digitzips, function(x) x[length(x)])
#creates the dataframe hogan_c as new hogan_c
contributions_all_zipz_df <- data_frame(contributions_all_zips2)
#changes the list to a numeric value. This helps the group by function which do4sn't like lists.
contributions_all_zipz_df %>% mutate_if(is.list, as.character) -> contributions_all_zipz_df
#changes the column header in the new dataframe to zip_codes. this will be helpful later on because it is unique.
colnames(contributions_all_zipz_df)[which(names(contributions_all_zipz_df) == "hogan_zips2")] <- "zip_codes"
#binds it to the hogan contributions database
newall_contribswithzips <- cbind(contributions_all_zipz_df, cleaned_contributions_new)
#ok, so now that we have our new list with the added zip codes, we can go through and group them and count them.
count_all_zip_codes <- newall_contribswithzips %>%
#the colum we are grouping
group_by(zip_codes)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_all_zip_codes)
count_all_zip_codes[1:10,]
data(zipcode)
View(zipcode)
#creates a merged list of zip codes and the hogan information.
hogan_state_list_fromzips <-  left_join(newhogan_contribswithzips, zipcode, by =c("zip_codes" = "zip"))
#let's start exploring where in the world this money is coming from...We can do that by extracting zip codes.
#searches for all number combos that are either 5 digits long or 5 digits followed by 4 digits with a dash in between.
contributions_all_zips1 <- stri_extract_all_regex(cleaned_contributions_new$`Contributor Address`, "(?<!\\d)(\\d{5}(?:[-\\s]\\d{4})?)\\b")
contributions_all_5digitzips <- stri_extract_all_regex(contributions_all_zips1, "\\d{5}")
#I was getting some extra 5 digit combos from addresses, so I used this lapply command to just grab the last one, since the zip is always last.
contributions_all_zips2 <- map(contributions_all_5digitzips, function(x) x[length(x)])
#creates the dataframe hogan_c as new hogan_c
contributions_all_zipz_df <- data_frame(contributions_all_zips2)
#changes the list to a numeric value. This helps the group by function which do4sn't like lists.
contributions_all_zipz_df %>% mutate_if(is.list, as.character) -> contributions_all_zipz_df
#changes the column header in the new dataframe to zip_codes. this will be helpful later on because it is unique.
colnames(contributions_all_zipz_df)[which(names(contributions_all_zipz_df) == "hogan_zips2")] <- "zip_codes"
#binds it to the hogan contributions database
newall_contribswithzips <- cbind(contributions_all_zipz_df, cleaned_contributions_new)
#ok, so now that we have our new list with the added zip codes, we can go through and group them and count them.
count_all_zip_codes <- newall_contribswithzips %>%
#the colum we are grouping
group_by(zip_codes)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_all_zip_codes)
count_all_zip_codes[1:10,]
View(contributions_all_zipz_df)
colnames(contributions_all_zipz_df)[which(names(contributions_all_zipz_df) == "contributions_all_zips2")] <- "zip_codes"
#binds it to the hogan contributions database
newall_contribswithzips <- cbind(contributions_all_zipz_df, cleaned_contributions_new)
#ok, so now that we have our new list with the added zip codes, we can go through and group them and count them.
count_all_zip_codes <- newall_contribswithzips %>%
#the colum we are grouping
group_by(zip_codes)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_all_zip_codes)
count_all_zip_codes[1:10,]
View(count_all_zip_codes)
View(newall_contribswithzips)
#pulls the database of zip codes/state information
data(zipcode)
View(zipcode)
#creates a merged list of zip codes and the hogan information.
allcontribs_state_list_fromzips <-  left_join(newall_contribswithzips, zipcode, by =c("zip_codes" = "zip"))
View(allcontribs_state_list_fromzips)
all_contribs_from_maryland <- allcontribs_state_list_fromzips %>%
filter(state == "Maryland")
all_contribs_from_maryland <- allcontribs_state_list_fromzips %>%
filter(state == "MD")
View(all_contribs_from_maryland)
library(tidyverse)
library(stringi)
library(zipcode)
baker_pg_County  <- baker_contribs_all %>%
#the colum we are grouping
filter(`Employer Name` == "Prince George's County")
View(baker_pg_County)
View(allcontribs_state_list_fromzips)
View(shea_contribs_all)
count_shea_bigcontribs <- shea_state_list_fromzips %>%
#the colum we are grouping
filter(`Contribution Amount` > 2500 )  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
count_shea_bigcontribs[1:2]
library(tidyverse)
count_shea_bigcontribs <- shea_state_list_fromzips %>%
#the colum we are grouping
filter(`Contribution Amount` > 2500 )  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`)) %>%
#arrange the list in descending order
arrange(desc(total))
count_shea_bigcontribs[1:2]
View(count_shea_bigcontribs)
count_ross_just_states <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(state)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_ross_just_states)
count_ross_just_states[1:10,]
mean(jealous_contribs_all$`Contribution Amount`)
mean(baker_contribs_all$`Contribution Amount`)
mean(shea_contribs_all$`Contribution Amount`)
mean(vignarajah_contribs_all$`Contribution Amount`)
mean(kamenetz_contribs_all$`Contribution Amount`)
mean(madaleno_contribs_all$`Contribution Amount`)
mean(ross_contribs_all$`Contribution Amount`)
mean(jealous_contribs_all$`Contribution Amount`)
count_jealous_states <- jealous_state_list_fromzips %>%
#the colum we are grouping
group_by(state, city)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n(), total = sum(`Contribution Amount`,  na.rm = TRUE)) %>%
#arrange the list in descending order
arrange(desc(total))
View(count_jealous_states)
count_jealous_states[1:10,]
View(baker_5digitzips)
View(baker_inkind_rebates_all)
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(`Contributor Name`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n())) %>%
#arrange the list in descending order
arrange(desc(total))
count_ross_contribs[1:10,]
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(`Contributor Name`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(total))
count_ross_contribs[1:10,]
library(tidyverse)
library(stringi)
library(zipcode)
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(`Contributor Name`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(total))
count_ross_contribs[1:10,]
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(`Contributor Name`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(total))
count_ross_contribs[1:10,]
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(`Contributor Name`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(total))
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(`Contributor Name`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(count))
count_ross_contribs[1:10,]
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(`Contributor Address`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(count))
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
group_by(`Contributor Address`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(count))
count_ross_contribs[1:10,]
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
filter(unique(`Contributor Name`))
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
unique(`Contributor Name`))
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
unique(`Contributor Name`)
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
unique(`Contributor Name`)
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
unique(`Contributor Name`)
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
unique(`Contributor Name`)
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
unique(`Contributor Name`, )
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
distinct(`Contributor Name` )
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
distinct(`Contributor Name` ) %>%
group_by(`Contributor Name`)  %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(count))
count_ross_contribs[1:10,]
count_ross_contribs <- ross_state_list_fromzips %>%
#the colum we are grouping
distinct(`Contributor Name` ) %>%
#creates a count with the row name being count. The n value is the number of times it occurs
summarise(count = n()) %>%
#arrange the list in descending order
arrange(desc(count))
count_ross_contribs[1:10,]
View(count_ross_contribs)
View(all_contribs_from_maryland)
View(allcontribs_state_list_fromzips)
View(baker_contribs_all)
View(allcontribs_state_list_fromzips)
library(tidyverse)
library(stringi)
library(zipcode)
write_csv(allcontribs_state_list_fromzips, "allcontributionswithzips.csv")
